//---------------------------------------------------------------------------

#include <vcl.h>
#include <vector>
#include <algorithm>
#pragma hdrstop

#include "MedialAxis.h"
#include "Main.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"
TMedial_Axis *Medial_Axis;
//---------------------------------------------------------------------------
__fastcall TMedial_Axis::TMedial_Axis(TComponent* Owner)
        : TForm(Owner)
{
}
//---------------------------------------------------------------------------

void  EjeMedio( Graphics::TBitmap  *Original )
{
        int width  = Original->Width;   //Ancho
        int height = Original->Height;  //Altura

        for(int y = 0; y<height; y++){     //cuenta ancho
                bool areaEncontrada = false;
                for(int x = 0; x<width; x++){
                        if( Original->Canvas->Pixels[x][y] == 0) {      //si es pixel negro guarda dato en vector y suma contador
                                areaEncontrada = true;
                                int xinit = x;
                                while(Original->Canvas->Pixels[x][y] == 0 && x < width){
                                        x++;
                                }
                                int xend = x;
                                int medio = xinit + ((xend - xinit) / 2);
                                Original->Canvas->Pixels[medio][y] = RGB(255,0,0);
                                areaEncontrada = false;

                        }
                }
        }

        //Original->Canvas->Pixels[0][width] = RGB(0,0,255);
        //Original->Canvas->Pixels[width][width] = RGB(0,0,255);
       // Original->Canvas->Pixels[100][0] = RGB(0,0,255);
       Original->Canvas->Pixels[width][height] = RGB(0,0,255);



        /*
        int width  = Original->Width;   //Ancho
        int height = Original->Height;  //Altura
        int kx = 0, ky = 0, kz = 0;
        std::vector<int> ValorMedio;    //vector
        int maxb=0,minb=255,maxg=0,ming=255,maxr=0,minr=255;

        for(int y = 0; y<width; y++){     //cuenta ancho

                for(int x = 0; x<height; x++){    //cuenta altura
                        if( Original->Canvas->Pixels[y][x] == 0) {      //si es pixel negro guarda dato en vector y suma contador
                                ky += x;
                                ValorMedio.push_back((Bitmap1->Canvas->Pixels[y][x]));
                        }
                }
                if(ValorMedio.size() % 2 == 0){
                        kz  = ValorMedio.size()/2;     //obteniendo el valor medio de x si es par
                }
                else{
                        kz = ky/ValorMedio.size(); //obteniendo el valor medio de x  si es impar
                }

                TColor medio;
                medio = TColor(10);
                //Agrega para colorear el pixel
                for(int c = kz-4; c<kz+4;c++){
                        Bitmap1->Canvas->Pixels[y][c] = medio;
                }
                // ky = (Bitmap1->Canvas->Pixels[x][height])/2;
                // ValorMedio.push_back((bitmap->Canvas->Pixels[x][height/2]));
                ky = 0;       // vacio contador
                ValorMedio.empty(); //vacio vector
        }
        */

}


void __fastcall TMedial_Axis::OKClick(TObject *Sender)
{
         
         TMDIChild *Child =(TMDIChild *)MainForm->ActiveMDIChild;       //llama la imagen
        if(Child!=NULL){
                Graphics::TBitmap *BitmapRuido=new Graphics::TBitmap();     // crea un mapa de bits (BitmapRuido) de la imagen
                BitmapRuido->Assign(Child->ActiveBitmap());                 //crea copia del mapa de bits

             EjeMedio(BitmapRuido);                //llamando funcion

         String name=ExtractFilePath(Child->FileName)+"\Eje Medio ="+ExtractFileName(Child->FileName);   // creando nombre del proceso
       // MainForm->CreateMDIChild(name,BitmapSuavizado);
         MainForm->CreateMDIChild(name,BitmapRuido);               //Crea una nueva imagen de la copia y con su nombre del proceso
         BitmapRuido->FreeImage();                     //vacia la variable BitmapEuido
         delete BitmapRuido;                     //libera memoria

         }

        Close();
}
//---------------------------------------------------------------------------

